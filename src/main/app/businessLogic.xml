<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:wd-staffing="http://www.mulesoft.org/schema/mule/wd-staffing" xmlns:sap="http://www.mulesoft.org/schema/mule/sap" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:wd-hr="http://www.mulesoft.org/schema/mule/wd-hr" xmlns:stdio="http://www.mulesoft.org/schema/mule/stdio" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/stdio http://www.mulesoft.org/schema/mule/stdio/current/mule-stdio.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/wd-hr http://www.mulesoft.org/schema/mule/wd-hr/current/mule-wd-hr.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/sap http://www.mulesoft.org/schema/mule/sap/current/mule-sap.xsd
http://www.mulesoft.org/schema/mule/wd-staffing http://www.mulesoft.org/schema/mule/wd-staffing/current/mule-wd-staffing.xsd">
    <data-mapper:config name="XML_To_Map" transformationGraphPath="xml_to_map.grf" doc:name="XML_To_Map"/>
    <data-mapper:config name="Map_To_ChangePreferredNameRequestType" transformationGraphPath="map_to_changepreferrednamerequesttype.grf" doc:name="Map_To_ChangePreferredNameRequestType"/>
	<data-mapper:config name="User_To_HireEmployeeRequestType_1" transformationGraphPath="user_to_hireemployeerequesttype_1.grf" doc:name="User_To_HireEmployeeRequestType_1"/>
    <batch:job name="businessLogicBatch1" max-failed-records="9999">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <data-mapper:transform config-ref="XML_To_Map" doc:name="SAP Employee to Map"/>
            <logger message="XXXX #[payload]" level="INFO" doc:name="Logger"/>
        </batch:input>
        <batch:process-records>
            <batch:step name="getUserInWdayStep" accept-policy="ALL">
                <logger message="XXXX EXISTING USER  #[payload]" level="INFO" doc:name="Logger"/>
                <expression-component doc:name="Expression"><![CDATA[System.err.println("test");
//payload.put("PersonalNumber","90000035");]]></expression-component>
                <enricher source="#[payload.getEmployeeData().get(0).getEmployeeID()]" target="#[recordVars['existingWorker']]" doc:name="store result in 'existingWorker'">
                    <wd-hr:get-employee config-ref="Workday_Human_Resource" employeeRequest-ref="#[org.mule.templates.WorkersRequest.createEmployeeRequest(payload['PersonalNumber'])]" doc:name="query Workday for existing worker"/>
                </enricher>
                <logger message="XXXX existing worker #[recordVars['existingWorker']]" level="INFO" doc:name="Logger"/>
            </batch:step>
            <batch:step name="insertWorkerStep" accept-expression="recordVars['existingWorker'] == null" accept-policy="ALL">

                <expression-component doc:name="prepare for insert"><![CDATA[//payload.put("Country", "${wday.country}");
//payload.put("State", "${wday.state}");
//payload.put("Organization", "${wday.organization}");
//payload.put("JobprofileId", "${wday.jobprofileId}");
//payload.put("PostalCode", "${wday.postalCode}");
//payload.put("City", "${wday.city}");
//payload.put("Location", "${wday.location}");
//payload.put("Currency", "${wday.currency}");

payload.put("Address", "New York");
payload.put("Email", "john.doe@aol.com");
payload.put("Id", payload.get('PersonalNumber'));


]]></expression-component>
                <logger message="XXXX before insert step #[payload] " level="INFO" doc:name="Logger"/>
                <data-mapper:transform config-ref="User_To_HireEmployeeRequestType_1" doc:name="User To HireEmployeeRequestType">
                    <data-mapper:input-arguments>
                        <data-mapper:input-argument key="country">${wday.country}</data-mapper:input-argument>
                        <data-mapper:input-argument key="postalCode">${wday.postalCode}</data-mapper:input-argument>
                        <data-mapper:input-argument key="state">${wday.state}</data-mapper:input-argument>
                        <data-mapper:input-argument key="city">${wday.city}</data-mapper:input-argument>
                        <data-mapper:input-argument key="location">${wday.location}</data-mapper:input-argument>
                        <data-mapper:input-argument key="organization">${wday.organization}</data-mapper:input-argument>
                        <data-mapper:input-argument key="jobprofile">${wday.jobprofileId}</data-mapper:input-argument>
                        <data-mapper:input-argument key="currency">${wday.currency}</data-mapper:input-argument>
                    </data-mapper:input-arguments>
                </data-mapper:transform>

                <wd-staffing:hire-employee config-ref="Workday_Staffing" doc:name="create Workday employee"/>
                <logger message="XXXX insert result #[payload.employeeReference.getID().get(1).getValue()]" level="INFO" doc:name="Logger"/>
            </batch:step>
            <batch:step name="updateWorkerStep" accept-expression="recordVars['existingWorker'] != null" accept-policy="ALL">

                <expression-component doc:name="prepare for update"><![CDATA[payload.put("Country", "${wday.country}");
payload.put("Id", recordVars['existingWorker']);]]></expression-component>
                <logger message="XXXX update step #[payload]  existing #[recordVars['existingWorker']]" level="INFO" doc:name="Logger"/>
                <data-mapper:transform config-ref="Map_To_ChangePreferredNameRequestType" doc:name="Map to EmployeeGetType"/>
                <wd-hr:change-preferred-name config-ref="Workday_Human_Resource" doc:name="update Workday employee"/>
                <logger message="XXXX update result #[payload]" level="INFO" doc:name="log result"/>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <scatter-gather doc:name="All">
                <processor-chain>
                    <json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
                    <logger message="Migration process has finished: #[payload]" level="INFO" doc:name="log 'Migration process has finished'"/>
                </processor-chain>
                <processor-chain>
                    <json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
                    <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" connector-ref="gmailConnector" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" doc:name="send mail"/>
                </processor-chain>
            </scatter-gather>
        </batch:on-complete>
    </batch:job>


    
    
</mule>
